Useful checklists
=================

Things to remember when adding a new puzzle
-------------------------------------------

Write the source file for the new puzzle (duhh).

Write a puzzle() statement in CMakeLists.txt containing all the
necessary metadata. Optionally also a solver() statement, and any
cliprogram() statements for extra auxiliary tools.

If the puzzle is by a new author, modify the copyright notice in
LICENCE and in puzzles.but. (Also in index.html, but that's listed
below under website changes.)

Double-check that the game structure name in the source file has
been renamed from `nullgame', so that it'll work on OS X. Actually
compiling it on OS X would be a good way to check this, if
convenient.

Add a documentation section in puzzles.but.

Make sure there's a Windows help topic name defined in puzzles.but,
and that it's referenced by the help topic field in the game
structure in the source file.

Check that REQUIRE_RBUTTON and/or REQUIRE_NUMPAD are set as
appropriate.

Add the new Unix binary name, and the names of any auxiliary solver
binaries, to .gitignore.

Write an instructions fragment for the webified puzzle pages, as
html/<puzzlename>.html .

Make a screenshot:
 - create an appropriate save file in `icons'
 - define <puzzlename>_redo in icons/icons.cmake if the screenshot
   wants to display a move halfway through an animation
 - define <puzzlename>_crop in icons/icons.cmake if the icon wants to
   be a sub-rectangle of the whole screenshot

Check in!

Put the puzzle on the web:
 - run puzzlesnap.sh
 - adjust the copyright in index-mid.html if the puzzle is by a new
   author
 - check that the new puzzle has appeared on the staging web page
 - test both Windows binary links, the docs link, the Javascript
   version and the Java version
 - run webupdate
 - test all those things once more on the live website
